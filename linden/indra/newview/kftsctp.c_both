// kftsctp.c  TPS TPC/SCTP handler

// NOTE: If you ever adapt this for SPARC64 that uses BIG_ENDIAN memory packing you will have to
// adapt all the memcpy() operations 

#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <errno.h>
#include <netinet/sctp.h>
#include <uuid/uuid.h>
#include <openssl/md5.h>

#include "kftsctp.h"
#include "kfhandlers.h"
//#include "tps_messages.h"

#define AV_NAME_SIZE 16
#define AV_PW_SIZE 32		// hashed password 
//#define SUCCESS 0
//#define FAILURE -1

//extern unsigned char Str0_buff[MAX_MSG];	//##kf  stream 0 message buffer
//extern int           Str0_type;				//##kf  > 0  if there is a stream 0 message waiting

char NameF[AV_NAME_SIZE + 1];		// fixed, FIRST
char NameL[AV_NAME_SIZE + 1];		// fixed, LAST
char Passwd[AV_PW_SIZE + 1];
int Sfd = 0;	// Server file descriptor for socket


int server_connect(const char* ip, const char* port){

// Define SCTP in indra/cmake/00-Common.cmake if you want SCTP comms rather than TCP ?
	struct addrinfo hints;
	struct addrinfo *result, *rp;

	int error;

	if(Sfd != 0) return(-3);	// already connected!
	
	/* Obtain address(es) matching host/port */
	memset(&hints, 0, sizeof(struct addrinfo));
	hints.ai_family = AF_UNSPEC;	/* Allow IPv4 or IPv6 */
	hints.ai_socktype = SOCK_STREAM; 
	hints.ai_flags = 0;
#ifdef SCTP
	hints.ai_protocol = IPPROTO_SCTP;
#else
	hints.ai_protocol = IPPROTO_TCP;
#endif
	error = getaddrinfo(ip, port, &hints, &result);
	if (error != 0) {
		printf("Error: getaddrinfo: %s\n", gai_strerror(error));
		return(-1);
	}

	/* getaddrinfo() returns a list of address structures.
	Try each address until we successfully connect(2).
	If socket(2) (or connect(2)) fails, we (close the socket
	and) try the next address. */

	for (rp = result; rp != NULL; rp = rp->ai_next) {
		Sfd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);
		if (Sfd == -1) continue;  // failed
		if (connect(Sfd, rp->ai_addr, rp->ai_addrlen) != -1)
			break;	// Success!
		close(Sfd); // try the next one
	}

	if (rp == NULL) { // No address succeeded
		fprintf(stderr, "Could not connect\n");
		return(-2);
	} // else rp contains the address that we have connected to

	freeaddrinfo(result);	// No longer needed
	
#ifdef SCTP
	/* Enable receipt of SCTP Snd/Rcv Data via sctp_recvmsg */
	struct sctp_event_subscribe events;
	memset( (void *)&events, 0, sizeof(events) );
	events.sctp_data_io_event = 1;
	error = setsockopt( Sfd, SOL_SCTP, SCTP_EVENTS,
						   (const void *)&events, sizeof(events) );

#else


#endif

	// set non-blocking
	int flags = fcntl(Sfd, F_GETFL, 0);
	fcntl(Sfd, F_SETFL, flags | O_NONBLOCK);

	/* Read and emit the status of the Socket (optional step) * /
	in = sizeof(status);
	ret = getsockopt( Sfd, SOL_SCTP, SCTP_STATUS,
					 (void *)&status, (socklen_t *)&in );
	printf("assoc id	= %d\n", status.sstat_assoc_id );
	printf("state	 = %d\n", status.sstat_state );
	printf("instrms   = %d\n", status.sstat_instrms );
	printf("outstrms  = %d\n", status.sstat_outstrms );   */

	return(0);
}

int server_disconnect(){	// is this used anywhere? Was tsctp_disconnect
	if(Sfd == 0) return(-1);	// not connected!
	close(Sfd);
	Sfd = 0;
	return(0);
}


//##kft routines for dealing with tritium/sctp messages  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

// Try get a sctp packet. Returns 0 if no message, -1 if disconnected, else stream + type 

//Old:  if it fails, do nothing; if it gets a Stream 0 packet, park it in stream 0 buffer
//   if it gets Stream 5 packet, send it to image-processing, which will fetch another packet, until
//	 no longer a stream 5.

int get_server_packet(unsigned char* packet_bufferp){
	// The packet is the same whether received via SCTP or TCP
	int length = 0;
	int flags = 0;
	int type;
	char notif[9];
	type = 0;

#ifdef SCTP		
	struct sctp_sndrcvinfo sndrcvinfo;
	length = sctp_recvmsg(Sfd, (void *)packet_bufferp, MAX_MSG,
		(struct sockaddr *)NULL, 0, &sndrcvinfo, &flags ); // SCTP returns just 1 packet
//	printf("Got %d chars\n", length);  

	if(flags & MSG_NOTIFICATION){
		memcpy(notif, packet_bufferp, 8);
		notif[8] = '\0';
		printf("SCTP Notification: %s\n", notif);
		return(0);
	}

	if(length == 0){	// may be a disconnect
		printf(" ?? Server disconnected ??\n");
		exit(0);			
		return(-1);				
	}

	if(length < 0){	//  Probably no mesage waiting
		return(0);
	}
		
#else  // TCP
	unsigned char server_buffer[MAX_MSG];	//##kf message packet buffer
	unsigned char *server_bufferp;			//##kf pointer
	server_bufferp = server_buffer;

	
	length = read(Sfd, server_bufferp, 4);			// read type and length
	if(length < 0){	//  Probably no mesage waiting
//		print_read_error();
		return(0);
	}
	if(length == 0){	// may be a disconnect
		printf(" ?? Server disconnected ??\n");
		exit(0);			
		return(-1);				
	}
	// Get type and length of packet
	int plength = 0;
	type = 0;
	memcpy(&type, server_bufferp, 2);
	memcpy(&plength, (server_bufferp + 2), 2);  //plength is message length, +2 for the end check

int t = type & 0x0FFF;
int s = (type & 0xF000) / 0x1000;

printf(">----- Incoming stream %d   type %d   length %d \n", s, t, (plength + 4));
//print_buffer(server_bufferp, length);

	// sanity check plength
	if((plength > -1) && (plength < 2048)){
		// put the type at start of the packet buffer
		memcpy(packet_bufferp, &type, 2);
		packet_bufferp += 2;
		// copy message into packet buffer
		length = read(Sfd, packet_bufferp, plength);
//x printf("\n        Got message length %d +4\n", length);
//print_buffer(packet_bufferp, length);

	}else{
		printf("\n>----- Sync error? Got type %x and length %d.\n", type, plength);
		return(0);
	}

	length = plength;

	// check the tail type
	int type2 = 0;
	memcpy(&type2, packet_bufferp + length - 2, 2);
	if(type2 != type){
		printf("\n>----- Sync error? Start type %x,  end type %x.\n", type, type2);
		return(0);
	}

	

#endif


	return(type);
	// note that returning the length is not necessary as we extract length
	// information from the contents of the message, also the 'stream' is 
	// included in the 'type'.
}

//int server_send(int length, unsigned char *send_bufferp){ old
int send_packet(int length, unsigned char *send_bufferp, int source){
	int ret;
	int t_s;
	t_s = 0;
	int mlength;

	// extract type and stream from start of message
	memcpy (&t_s, send_bufferp, 2);
//int t = t_s & 0x0FFF;
	int stream = (t_s & 0xF000) / 0x1000;

#ifdef SCTP
	// maybe fix this for long steam 5 messages?
	mlength = length - 4; // less 4 header type+size
#else  //TCP
	if(stream == 5){
		mlength = length - 4; // less 6 header, + 2 suffix
	}else{
		mlength = length - 2; // less 4 header, + 2 suffix
	}
	memcpy((send_bufferp + length), &t_s, 2);	// suffix type/stream
	length += 2;
#endif

	if(stream == 5){
		memcpy((send_bufferp + 2), &mlength, 4);	// insert the long length
	}else{
		memcpy((send_bufferp + 2), &mlength, 2);	// insert the length
	}

#ifdef SCTP			
	int stream;
	stream = (type & STREAMMASK) >> 12;
	ret = sctp_sendmsg(Sfd, send_bufferp, (size_t)length,
			 NULL, 0, 0, 0, (uint16_t)stream, 0, 0 );
#else  // TCP
printf("<----- Sending  message %s   length %d   source %d\n", PacketName(t_s), length, source);
	ret = write(Sfd, send_bufferp, length);
#endif

	if(ret == length){
printf("<----- Sent\n");
		return(0);
	}else if(ret == -1){
		char* errmsg = strerror (errno);
#ifndef SCTP			
		// TCP error
	 	printf("Error: send_packet failed %s, type 0x%X, length %d\n", errmsg, t_s, length);

#else
	 	printf("Error: send_packet failed %s, stream %d, msg 0x%X, length %d\n", errmsg, stream, i, length);
	 	switch(errno){
			case EWOULDBLOCK:
				printf("The socket is marked nonblocking and the requested operation would block.\n");
				break;
			case EBADF: 
				printf("The s argument is an invalid file descriptor.\n");
				break;
			case ENOTSOCK:
				printf("The s argument is not a socket.\n");
				break;
			case EDESTADDRREQ:
				printf("A destination address is required.\n");
				break;
			case EOPNOTSUPP:
				printf("MSG_OOB is set as a flag.\n");
				break;
			case ENOBUFS:
				printf("The system couldn't allocate an internal buffer. The operation may succeed when buffers become available.\n");
				break;
			case EPIPE:
				printf("The socket is shutting down and no more writes are allowed.\n");
				break;
			case ENOTCONN:
				printf("There is no established association.\n");
				break;
			case EINVAL:
				printf("Control message length is incorrect.\n");
				break;
			case EFAULT:
				printf("An invalid user space address was specified for a parameter.\n");
				break;
			case EMSGSIZE:
				printf("The socket requires that the message be sent atomically, but the size of the message made this impossible.\n");
				break;
			case EAFNOSUPPORT:
				printf("Address family of the specified destination address is other than AF_INET or AF_INET6.\n");
				break;
			default: 
				printf("Error without any reason.\n");
		}
		return(-1);
#endif
	} // else
 	printf("Error: send_packet sent %d of %d characters.\n", ret, length);
	return(-2);
}

void print_read_error(){
	printf("Error: read TCP socket failed.\n");
 	switch(errno){
		case EWOULDBLOCK:
			printf("EWOULDBLOCK/EAGAIN The socket is marked nonblocking and the requested operation would block.\n");
			break;
		case EBADF:  
			printf("EBADF fd is not a valid file descriptor or is not open for reading.\n");
			break;
		case EFAULT:
			printf("EFAULT buffer is outside your accessible address space.\n");
			break;
		case EINTR:  
			printf("EINTR The call was interrupted by a signal before any data was read; see signal(7).\n");
			break;
		case EINVAL: 
			printf("EINVAL fd  is  attached to an object which is unsuitable for reading etc.\n");
			break;
		case EIO:    
			printf("EIO I/O  error.   bg proc trying to read from its controlling tty etc, or low-level reading from a disk or tape.\n");
			break;
		case EISDIR: 
			printf("EISDIR fd refers to a directory.\n");
			break;
		default:
			printf("Unknown error %d\n", errno);
	}
}

// utility to print packets in hex
void print_buffer(unsigned char *buffer, int mlen){
	int n = 0;
	int p = 0;

	while(n<mlen){
		printf("%02x ", buffer[n]);
		p = 0;
		n++;
		if(n%8 == 0) printf("   ");
		if(n%16 == 0){
			 printf("\n");
			 p = 1;
		}
	}
	if(p == 0) printf("\n");
	printf("\n");
}

